name: Builder

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request_target:
    # prevent secret leaks by enabling: "Require approval for all external contributors" in repository settings "Actions">"General"
    types:
      - opened
      - synchronize
    branches:
      - master
  workflow_dispatch:

env:
  NRF_TOOLCHAIN_VERSION: v2.7.0
  NRF_SDK_VERSION: v2.7.0

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Install Dependencies + West + NRF Util
        run: |
          sudo apt update
          sudo apt install --no-install-recommends \
            curl \
            git \
            python3 python3-pip \

          pip3 install --break-system-packages west

          curl https://files.nordicsemi.com/artifactory/swtools/external/nrfutil/executables/x86_64-unknown-linux-gnu/nrfutil -o /usr/local/bin/nrfutil
          chmod +x /usr/local/bin/nrfutil
          nrfutil install toolchain-manager

      - name: Prepare Restore NCS
        run: |
          mkdir -p /home/runner/ncs/

      - name: Restore NCS
        id: cache-ncs-restore
        uses: actions/cache/restore@v4
        with:
          path: /home/runner/ncs/
          key: ncs-${{ runner.os }}-${{ env.NRF_TOOLCHAIN_VERSION }}-${{ env.NRF_SDK_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch Toolchain + NRF & ANT SDK
        if: steps.cache-ncs-restore.outputs.cache-hit != 'true'
        run: |
          # install toolchain
          nrfutil toolchain-manager install --ncs-version ${NRF_TOOLCHAIN_VERSION}

          # install nrf sdk
          mkdir -p /home/runner/ncs/sdks/
          cd /home/runner/ncs/sdks/
          west init -m https://github.com/nrfconnect/sdk-nrf --mr ${NRF_SDK_VERSION} ${NRF_SDK_VERSION}
          cd /home/runner/ncs/sdks/${NRF_SDK_VERSION}/
          west update

          ## install ant SDK
          # allow access
          git config --global credential.helper cache
          git ls-remote https://SKS_AIRSPY_ANT_TOKEN:${{ secrets.SKS_AIRSPY_ANT_TOKEN }}@github.com/ant-nrfconnect/sdk-ant > /dev/null
          # fetch ant SDK
          west config manifest.group-filter +ant
          west update
          pushd /home/runner/ncs/sdks/${NRF_SDK_VERSION}/ant && git apply --whitespace=fix ${{ github.workspace }}/ant_sdk_nrf52832.patch && popd
          west list ant

          # finalize sdk install
          nrfutil toolchain-manager launch -- west zephyr-export

      - name: Save NCS
        if: steps.cache-ncs-restore.outputs.cache-hit != 'true'
        id: cache-ncs-save
        uses: actions/cache/save@v4
        with:
          path: /home/runner/ncs/
          key: ncs-${{ runner.os }}-${{ env.NRF_TOOLCHAIN_VERSION }}-${{ env.NRF_SDK_VERSION }}

      - name: Build Application
        id: app-build
        working-directory: /home/runner/ncs/sdks/${{ env.NRF_SDK_VERSION }}/
        run: |
          echo "${{ secrets.MCUBOOT_SIGNING_KEY }}" > ${{ github.workspace }}/mcuboot.pem
          nrfutil toolchain-manager launch -- west build --board sks_airspy --build-dir ${{ github.workspace }}/build/ --no-sysbuild ${{ github.workspace }}

      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sks-airspy-community-firmware
          path: |
            ${{ github.workspace }}/build/zephyr/merged.hex
            ${{ github.workspace }}/build/zephyr/dfu_application.zip

  release:
    runs-on: ubuntu-24.04
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    env:
      VERSION_TAG_NAME: ${{ github.ref_name }}
      FILENAME_PREFIX: sascf
    needs: build
    steps:
      - uses: actions/checkout@v4

      # TODO: do not rely on cache restoration, but use outputs for ANT SDK version
      - name: Restore NCS
        id: cache-ncs-restore
        uses: actions/cache/restore@v4
        with:
          path: /home/runner/ncs/
          key: ncs-${{ runner.os }}-${{ env.NRF_TOOLCHAIN_VERSION }}-${{ env.NRF_SDK_VERSION }}
      
      - uses: actions/download-artifact@v4
        with:
          name: sks-airspy-community-firmware
          path: release_artifacts
      
      - name: Prepare Release Notes
        run: |
          touch release_artifacts/NOTES

          echo "|Release | ${VERSION_TAG_NAME}|" >> release_artifacts/NOTES
          echo "|---|---|" >> release_artifacts/NOTES

          # read and write VERSION file version info
          set -o allexport
          source <(cat VERSION | tr -d ' ')
          set +o allexport
          echo "| APP | ${VERSION_MAJOR}.${VERSION_MINOR}.${PATCHLEVEL} |" >> release_artifacts/NOTES

          # get ANT SDK version
          ANT_SDK_VERSION=$(sed -n -E 's/.*ANT_VERSION_STRING\s+\"([[:digit:]\.]*)\".*$/\1/p;' /home/runner/ncs/sdks/${NRF_SDK_VERSION}/ant/include/ant_parameters.h)
          
          # write SDKs and toolchain versions
          echo "| nRF SDK | ${NRF_SDK_VERSION} |" >> release_artifacts/NOTES
          echo "| ANT SDK | ${ANT_SDK_VERSION} |" >> release_artifacts/NOTES
          echo "| Toolchain | ${NRF_TOOLCHAIN_VERSION} |" >> release_artifacts/NOTES          

      - name: Prepare Release Files
        run: |
          mv release_artifacts/merged.hex release_artifacts/${FILENAME_PREFIX}_${VERSION_TAG_NAME}_$(git describe --abbrev=12 --always).hex
          mv release_artifacts/dfu_application.zip release_artifacts/${FILENAME_PREFIX}_ota_dfu_${VERSION_TAG_NAME}_$(git describe --abbrev=12 --always).zip

      - name: Release
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create \
            --verify-tag \
            --latest \
            --target ${{ github.sha }} \
            --repo ${{ github.repository }} \
            --title ${VERSION_TAG_NAME}
            --notes-file release_artifacts/NOTES \
            ${VERSION_TAG_NAME} \
            release_artifacts/${FILENAME_PREFIX}_*.hex release_artifacts/${FILENAME_PREFIX}_ota_dfu_*.zip
